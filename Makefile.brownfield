# Makefile para BMAD-Method com Gemini CLI
# Este Makefile automatiza todo o fluxo de trabalho do BMAD-Method para projetos existentes

.PHONY: help install setup-gemini setup-bmad check-deps \
        analyze plan-prd plan-arch validate create-epic create-stories \
        implement-story refactor fix-bug migrate test-connection \
        clean-docs status full-setup brownfield-flow

# Variáveis de configuração
GEMINI_CLI_VERSION := latest
PROJECT_NAME := $(shell basename $(PWD))
STORY_NUMBER ?= 1.1
MAKEFLAGS += -f Makefile.brownfield

# Configuração de modelo Gemini (para evitar quota exceeded)
GEMINI_MODEL ?= gemini-2.5-flash
MODEL_FLAG := --model $(GEMINI_MODEL)

# Configuração de idioma para todos os agentes
LANG_INSTRUCTION := "IMPORTANTE: Responda sempre em português do Brasil pt-BR. Todos os documentos, códigos, comentários e explicações devem estar em português brasileiro. Use terminologia técnica em português quando possível."
AGENT_PREFIX := "Responda em português brasileiro."

# Cores para output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
NC := \033[0m # No Color

##@ Ajuda e Informações

help: ## 📋 Exibir esta mensagem de ajuda
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    BMAD-Method Makefile                      ║$(NC)"
	@echo "$(CYAN)║              Automação para Projetos Existentes             ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)📦 INSTALAÇÃO E CONFIGURAÇÃO:$(NC)"
	@echo "  $(GREEN)make install$(NC)          - Instalar Gemini CLI e BMAD-Method"
	@echo "  $(GREEN)make setup-gemini$(NC)     - Configurar apenas Gemini CLI"
	@echo "  $(GREEN)make setup-bmad$(NC)       - Configurar apenas BMAD-Method"
	@echo "  $(GREEN)make setup-oauth$(NC)      - Configurar autenticação OAuth"
	@echo "  $(GREEN)make check-deps$(NC)       - Verificar dependências instaladas"
	@echo "  $(GREEN)make test-connection$(NC)  - Testar conexão com Gemini API"
	@echo "  $(GREEN)make set-model$(NC)        - Escolher modelo Gemini interativamente"
	@echo "  $(GREEN)make change-model$(NC)     - Alterar modelo rapidamente"
	@echo ""
	@echo "$(YELLOW)🚀 FLUXO COMPLETO (RECOMENDADO):$(NC)"
	@echo "  $(GREEN)make full-setup$(NC)       - Instalação completa + configuração"
	@echo "  $(GREEN)make brownfield-flow$(NC)  - Executar fluxo completo para brownfield"
	@echo ""
	@echo "$(YELLOW)📊 ANÁLISE E DOCUMENTAÇÃO:$(NC)"
	@echo "  $(GREEN)make analyze$(NC)          - Documentar estado atual do projeto"
	@echo "  $(GREEN)make plan-prd$(NC)         - Criar PRD para brownfield"
	@echo "  $(GREEN)make plan-arch$(NC)        - Criar arquitetura para brownfield"
	@echo "  $(GREEN)make validate$(NC)         - Executar checklist de validação"
	@echo ""
	@echo "$(YELLOW)📝 CRIAÇÃO DE ÉPICOS E HISTÓRIAS:$(NC)"
	@echo "  $(GREEN)make create-epic$(NC)      - Criar épico para brownfield"
	@echo "  $(GREEN)make create-stories$(NC)   - Criar histórias de usuário"
	@echo ""
	@echo "$(YELLOW)💻 IMPLEMENTAÇÃO:$(NC)"
	@echo "  $(GREEN)make implement-story$(NC)  - Implementar história específica"
	@echo "  $(GREEN)make refactor$(NC)         - Refatorar código existente"
	@echo "  $(GREEN)make fix-bug$(NC)          - Corrigir bug complexo"
	@echo "  $(GREEN)make migrate$(NC)          - Migração de tecnologia"
	@echo ""
	@echo "$(YELLOW)🔧 UTILITÁRIOS:$(NC)"
	@echo "  $(GREEN)make status$(NC)           - Status das instalações"
	@echo "  $(GREEN)make clean-docs$(NC)       - Limpar documentação gerada"
	@echo "  $(GREEN)make configure-language$(NC) - Configurar idioma português brasileiro"
	@echo "  $(GREEN)make manual-command$(NC)   - Executar comando manual com agente específico"
	@echo "  $(GREEN)make dev-help$(NC)         - Comandos úteis para desenvolvimento"
	@echo "  $(GREEN)make quota-help$(NC)       - Ajuda para problemas de quota"
	@echo "  $(GREEN)make set-model$(NC)        - Escolher modelo interativamente"
	@echo "  $(GREEN)make interactive$(NC)      - Abrir Gemini CLI em modo totalmente interativo"
	@echo ""
	@echo "$(YELLOW)📖 EXEMPLOS DE USO:$(NC)"
	@echo "  $(CYAN)make install$(NC)                    # Primeira instalação"
	@echo "  $(CYAN)make brownfield-flow$(NC)           # Fluxo completo"
	@echo "  $(CYAN)make implement-story STORY_NUMBER=1.2$(NC)  # Implementar história específica"
	@echo ""
	@echo "$(YELLOW)⚠️  REQUISITOS:$(NC)"
	@echo "  - Node.js v20+"
	@echo "  - Conta Google para autenticação OAuth"
	@echo "  - Projeto existente com estrutura definida"
	@echo ""
	@echo "$(YELLOW)🌐 IDIOMA:$(NC)"
	@echo "  - Todos os agentes respondem em português brasileiro"
	@echo "  - Documentos e códigos gerados em português"
	@echo "  - Use 'make configure-language' para ver configurações"
	@echo ""
	@echo "$(YELLOW)🤖 MODELO GEMINI:$(NC)"
	@echo "  - Padrão: $(GEMINI_MODEL) (evita quota exceeded)"
	@echo "  - Para usar Pro: GEMINI_MODEL=gemini-2.5-pro make comando"
	@echo "  - Use 'make set-model' para escolher interativamente"
	@echo "  - Use 'make change-model' para alterar rapidamente"
	@echo ""

##@ Instalação e Configuração

install: ## 🔧 Instalar Gemini CLI e BMAD-Method (comando principal)
	@echo "$(CYAN)🚀 Iniciando instalação completa...$(NC)"
	@$(MAKE) -f Makefile.brownfield setup-gemini
	@$(MAKE) -f Makefile.brownfield setup-bmad
	@$(MAKE) -f Makefile.brownfield check-deps
	@echo "$(GREEN)✅ Instalação completa finalizada!$(NC)"

setup-gemini: ## 🤖 Instalar e configurar Gemini CLI
	@echo "$(BLUE)📦 Instalando Gemini CLI...$(NC)"
	@if ! command -v gemini >/dev/null 2>&1; then \
		echo "$(YELLOW)⬇️  Instalando @google/gemini-cli globalmente...$(NC)"; \
		npm install -g @google/gemini-cli; \
	else \
		echo "$(GREEN)✅ Gemini CLI já está instalado$(NC)"; \
	fi
	@echo "$(BLUE)🔑 Configurando autenticação OAuth...$(NC)"
	@echo "$(YELLOW)💡 O Gemini CLI usa autenticação OAuth (sem necessidade de API Key)$(NC)"
	@echo "$(YELLOW)💡 Se necessário, execute: gemini -p '/auth' para configurar$(NC)"
	@echo "$(BLUE)🧪 Testando instalação do Gemini CLI...$(NC)"
	@gemini --version || (echo "$(RED)❌ Erro na instalação do Gemini CLI$(NC)" && exit 1)
	@echo "$(GREEN)✅ Gemini CLI instalado e configurado com sucesso!$(NC)"

setup-bmad: ## 🎯 Instalar e configurar BMAD-Method
	@echo "$(PURPLE)📦 Instalando BMAD-Method...$(NC)"
	@echo "$(YELLOW)⚠️  Durante a instalação, selecione 'Gemini CLI' quando perguntado sobre o IDE$(NC)"
	@echo "$(YELLOW)⚠️  Escolha 'Complete installation' para projetos existentes$(NC)"
	@echo "$(BLUE)🔄 Executando instalação interativa...$(NC)"
	@npx bmad-method install
	@echo "$(GREEN)✅ BMAD-Method instalado com sucesso!$(NC)"

setup-oauth: ## 🔐 Configurar autenticação OAuth do Gemini CLI
	@echo "$(BLUE)🔐 Configurando autenticação OAuth...$(NC)"
	@echo "$(YELLOW)💡 Uma janela do navegador será aberta para autenticação$(NC)"
	@echo "$(YELLOW)💡 Faça login com sua conta Google quando solicitado$(NC)"
	@gemini -p "/auth" || (echo "$(RED)❌ Erro na configuração OAuth$(NC)" && exit 1)
	@echo "$(GREEN)✅ Autenticação OAuth configurada com sucesso!$(NC)"

check-deps: ## ✅ Verificar se todas as dependências estão instaladas
	@echo "$(CYAN)🔍 Verificando dependências...$(NC)"
	@echo "$(BLUE)📋 Verificando Node.js...$(NC)"
	@node --version || (echo "$(RED)❌ Node.js não encontrado$(NC)" && exit 1)
	@echo "$(BLUE)📋 Verificando npm...$(NC)"
	@npm --version || (echo "$(RED)❌ npm não encontrado$(NC)" && exit 1)
	@echo "$(BLUE)📋 Verificando Gemini CLI...$(NC)"
	@gemini --version || (echo "$(RED)❌ Gemini CLI não encontrado$(NC)" && exit 1)
	@echo "$(BLUE)📋 Verificando BMAD-Method...$(NC)"
	@npx bmad-method status || (echo "$(YELLOW)⚠️  BMAD-Method pode não estar configurado$(NC)")
	@echo "$(BLUE)📋 Verificando autenticação OAuth...$(NC)"
	@echo "$(GREEN)✅ Usando autenticação OAuth (sem necessidade de API Key)$(NC)"
	@echo "$(YELLOW)💡 Se houver problemas de autenticação, execute: gemini -p '/auth'$(NC)"
	@echo "$(GREEN)✅ Todas as dependências estão OK!$(NC)"

test-connection: ## 🧪 Testar conexão com Gemini API
	@echo "$(BLUE)🔗 Testando conexão com Gemini API usando $(GEMINI_MODEL)...$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    TESTE DE CONEXÃO                          ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)Hello, this is a connection test. Please respond with 'Connection successful!'$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Se receber uma resposta, a conexão está funcionando$(NC)"
	@echo "$(YELLOW)5. Digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver testado a conexão...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Teste de conexão concluído!$(NC)"
	@echo "$(YELLOW)💡 Se houve problemas, tente: GEMINI_MODEL=gemini-2.5-flash make test-connection$(NC)"

set-model: ## 🤖 Configurar modelo Gemini interativamente
	@echo "$(CYAN)🤖 Configuração de Modelo Gemini:$(NC)"
	@echo ""
	@echo "$(BLUE)Modelo atual: $(GEMINI_MODEL)$(NC)"
	@echo ""
	@echo "$(YELLOW)Escolha o modelo:$(NC)"
	@echo "  $(GREEN)1)$(NC) gemini-2.5-flash  - Rápido, menos quota (RECOMENDADO)"
	@echo "  $(GREEN)2)$(NC) gemini-2.5-pro    - Melhor qualidade, mais quota"
	@echo "  $(GREEN)3)$(NC) Cancelar"
	@echo ""
	@printf "$(CYAN)Digite sua escolha (1-3): $(NC)"; \
	read choice; \
	case $$choice in \
		1) \
			echo "$(GREEN)✅ Configurando gemini-2.5-flash...$(NC)"; \
			sed -i 's/GEMINI_MODEL ?= .*/GEMINI_MODEL ?= gemini-2.5-flash/' bmad-brownfield/Makefile.brownfield; \
			echo "$(GREEN)✅ Modelo alterado para gemini-2.5-flash!$(NC)"; \
			echo "$(BLUE)💡 Reinicie os comandos para aplicar a mudança$(NC)"; \
			;; \
		2) \
			echo "$(YELLOW)⚠️  Configurando gemini-2.5-pro...$(NC)"; \
			echo "$(RED)⚠️  ATENÇÃO: Este modelo pode causar quota exceeded!$(NC)"; \
			sed -i 's/GEMINI_MODEL ?= .*/GEMINI_MODEL ?= gemini-2.5-pro/' bmad-brownfield/Makefile.brownfield; \
			echo "$(GREEN)✅ Modelo alterado para gemini-2.5-pro!$(NC)"; \
			echo "$(BLUE)💡 Reinicie os comandos para aplicar a mudança$(NC)"; \
			;; \
		3) \
			echo "$(YELLOW)❌ Operação cancelada$(NC)"; \
			;; \
		*) \
			echo "$(RED)❌ Opção inválida. Use 1, 2 ou 3$(NC)"; \
			;; \
	esac

change-model: ## 🔄 Alterar modelo rapidamente (alias para set-model)
	@$(MAKE) -f Makefile.brownfield set-model

quota-help: ## 🚨 Ajuda para resolver problemas de quota
	@echo "$(RED)🚨 Problemas de Quota Gemini$(NC)"
	@echo ""
	@echo "$(YELLOW)Erro 429 - Quota Exceeded:$(NC)"
	@echo "  - Você atingiu o limite diário do Gemini 2.5 Pro"
	@echo "  - Solução: Use o modelo Flash (mais rápido, menos quota)"
	@echo ""
	@echo "$(GREEN)✅ Soluções Imediatas:$(NC)"
	@echo "  $(CYAN)1. make analyze GEMINI_MODEL=gemini-2.5-flash$(NC)"
	@echo "  $(CYAN)2. export GEMINI_MODEL=gemini-2.5-flash$(NC)"
	@echo "  $(CYAN)3. Editar Makefile: GEMINI_MODEL ?= gemini-2.5-flash$(NC)"
	@echo ""
	@echo "$(BLUE)💡 Dicas:$(NC)"
	@echo "  - Flash: Rápido, adequado para a maioria das tarefas"
	@echo "  - Pro: Melhor para tarefas complexas (quando quota permitir)"
	@echo "  - Quota reseta diariamente"
	@echo ""
	@echo "$(YELLOW)⚡ Teste rápido:$(NC)"
	@echo "  $(CYAN)make test-connection GEMINI_MODEL=gemini-2.5-flash$(NC)"

##@ Fluxos Completos

full-setup: ## 🚀 Configuração completa (instalação + verificação + teste)
	@echo "$(CYAN)🚀 Iniciando configuração completa do ambiente...$(NC)"
	@$(MAKE) -f Makefile.brownfield install
	@$(MAKE) -f Makefile.brownfield test-connection
	@echo "$(GREEN)🎉 Ambiente completamente configurado e testado!$(NC)"
	@echo "$(YELLOW)💡 Próximo passo: execute 'make brownfield-flow' para começar$(NC)"

brownfield-flow: ## 🔄 Executar fluxo completo para projetos brownfield
	@echo "$(CYAN)🔄 Iniciando fluxo completo para projeto brownfield...$(NC)"
	@echo "$(YELLOW)📊 Fase 1: Análise e Documentação$(NC)"
	@$(MAKE) -f Makefile.brownfield analyze
	@echo "$(YELLOW)📋 Fase 2: Planejamento$(NC)"
	@$(MAKE) -f Makefile.brownfield plan-prd
	@$(MAKE) -f Makefile.brownfield plan-arch
	@echo "$(YELLOW)✅ Fase 3: Validação$(NC)"
	@$(MAKE) -f Makefile.brownfield validate
	@echo "$(YELLOW)📝 Fase 4: Criação de Épicos$(NC)"
	@$(MAKE) -f Makefile.brownfield create-epic
	@echo "$(GREEN)🎉 Fluxo brownfield completo! Próximos passos:$(NC)"
	@echo "$(CYAN)  1. make create-stories     # Criar histórias detalhadas$(NC)"
	@echo "$(CYAN)  2. make implement-story    # Implementar primeira história$(NC)"

##@ Análise e Documentação

analyze: ## 📊 Documentar estado atual do projeto
	@echo "$(BLUE)📊 Analisando estado atual do projeto '$(PROJECT_NAME)'...$(NC)"
	@echo "$(YELLOW)⏱️  Tempo estimado: 5-10 minutos$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @analyst *document-project$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a análise...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Análise do projeto marcada como concluída!$(NC)"
	@echo "$(BLUE)📄 Documentos gerados: docs/project-analysis.md$(NC)"

plan-prd: ## 📋 Criar PRD para brownfield
	@echo "$(PURPLE)📋 Criando PRD para projeto brownfield...$(NC)"
	@echo "$(YELLOW)⏱️  Tempo estimado: 15-20 minutos$(NC)"
	@echo "$(YELLOW)💡 Você será questionado sobre melhorias desejadas$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @pm *create-doc brownfield-prd$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a criação do PRD...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ PRD para brownfield criado!$(NC)"
	@echo "$(BLUE)📄 Documento gerado: docs/prd.md$(NC)"

plan-arch: ## 🏗️ Criar arquitetura para brownfield
	@echo "$(CYAN)🏗️  Criando arquitetura para projeto brownfield...$(NC)"
	@echo "$(YELLOW)⏱️  Tempo estimado: 20-30 minutos$(NC)"
	@echo "$(YELLOW)💡 Você será questionado sobre arquitetura atual$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @architect *create-doc brownfield-architecture$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a criação da arquitetura...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Arquitetura para brownfield criada!$(NC)"
	@echo "$(BLUE)📄 Documento gerado: docs/architecture.md$(NC)"

validate: ## ✅ Executar checklist de validação
	@echo "$(GREEN)✅ Executando checklist de validação...$(NC)"
	@echo "$(YELLOW)⏱️  Tempo estimado: 10-15 minutos$(NC)"
	@echo "$(YELLOW)💡 Revise cada item apresentado cuidadosamente$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @po *execute-checklist po-master-checklist$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a validação...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Validação concluída!$(NC)"

##@ Criação de Épicos e Histórias

create-epic: ## 📝 Criar épico para brownfield
	@echo "$(PURPLE)📝 Criando épico para projeto brownfield...$(NC)"
	@echo "$(YELLOW)💡 Você definirá nome, objetivo e critérios de sucesso$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @pm *brownfield-create-epic$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a criação do épico...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Épico criado com sucesso!$(NC)"

create-stories: ## 📖 Criar histórias de usuário detalhadas
	@echo "$(BLUE)📖 Criando histórias de usuário...$(NC)"
	@echo "$(YELLOW)💡 Execute múltiplas vezes para criar várias histórias$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @sm create-next-story$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a criação da história...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ História criada!$(NC)"
	@echo "$(BLUE)💡 Para criar mais histórias, execute: make create-stories$(NC)"

##@ Implementação

implement-story: ## 💻 Implementar história específica
	@echo "$(GREEN)💻 Implementando história $(STORY_NUMBER)...$(NC)"
	@echo "$(YELLOW)💡 Use STORY_NUMBER=X.Y para especificar a história$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @dev implement story $(STORY_NUMBER)$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído a implementação da história $(STORY_NUMBER)...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ História $(STORY_NUMBER) implementada!$(NC)"

refactor: ## 🔧 Refatorar código existente
	@echo "$(YELLOW)🔧 Iniciando processo de refatoração...$(NC)"
	@echo "$(BLUE)Este processo tem 3 etapas que você executará em sequência$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    ETAPA 1: ANÁLISE                          ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute: $(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo "$(YELLOW)3. Digite: $(CYAN)$(AGENT_PREFIX) @analyst *document-project$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando concluir a análise...$(NC)"
	@read dummy
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    ETAPA 2: ARQUITETURA                      ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. No mesmo terminal (ou novo)$(NC)"
	@echo "$(YELLOW)2. Execute: $(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo "$(YELLOW)3. Digite: $(CYAN)$(AGENT_PREFIX) @architect *review-architecture$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando concluir a revisão da arquitetura...$(NC)"
	@read dummy
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    ETAPA 3: PLANEJAMENTO                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. No mesmo terminal (ou novo)$(NC)"
	@echo "$(YELLOW)2. Execute: $(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo "$(YELLOW)3. Digite: $(CYAN)$(AGENT_PREFIX) @pm *create-doc brownfield-prd$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando concluir o planejamento...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Análise de refatoração concluída!$(NC)"
	@echo "$(YELLOW)💡 Próximo passo: Especifique o componente a refatorar$(NC)"
	@echo "$(CYAN)💡 Comando: $(AGENT_PREFIX) @dev refactor [nome-do-componente]$(NC)"

fix-bug: ## 🐛 Processo para corrigir bug complexo
	@echo "$(RED)🐛 Iniciando processo de correção de bug...$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    ETAPA 1: ANÁLISE INICIAL                  ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute: $(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo "$(YELLOW)3. Digite: $(CYAN)$(AGENT_PREFIX) @analyst *document-project$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando concluir a análise inicial...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Análise inicial concluída!$(NC)"
	@echo ""
	@echo "$(YELLOW)💡 Próximos passos para executar em sequência:$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDOS PARA EXECUTAR                    ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 2 - Análise do Bug:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @dev analyze bug [descrição-do-bug]$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 3 - Design da Correção:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @architect *design-fix [bug]$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 4 - Implementação:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @dev fix [bug]$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 5 - Validação:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @qa validate [correção]$(NC)"
	@echo ""
	@echo "$(BLUE)💡 Execute cada comando em uma nova sessão do Gemini CLI$(NC)"

migrate: ## 🔄 Processo de migração de tecnologia
	@echo "$(PURPLE)🔄 Iniciando processo de migração...$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    ETAPA 1: DOCUMENTAÇÃO                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute: $(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo "$(YELLOW)3. Digite: $(CYAN)$(AGENT_PREFIX) @analyst *document-project$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando concluir a documentação...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Documentação inicial concluída!$(NC)"
	@echo ""
	@echo "$(YELLOW)💡 Próximos passos para executar em sequência:$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDOS PARA EXECUTAR                    ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 2 - Arquitetura de Migração:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @architect *create-doc migration-architecture$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 3 - Roadmap de Migração:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @pm *create-migration-roadmap$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 4 - Checklist de Migração:$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @po *execute-checklist migration-checklist$(NC)"
	@echo ""
	@echo "$(YELLOW)ETAPA 5 - Implementação (substitua [número] pela fase):$(NC)"
	@echo "$(CYAN)$(AGENT_PREFIX) @dev implement migration-phase [número]$(NC)"
	@echo ""
	@echo "$(BLUE)💡 Execute cada comando em uma nova sessão do Gemini CLI$(NC)"

##@ Utilitários

status: ## 📊 Verificar status das instalações
	@echo "$(CYAN)📊 Status do ambiente BMAD-Method:$(NC)"
	@echo ""
	@echo "$(BLUE)🔧 Dependências:$(NC)"
	@printf "  Node.js: "
	@node --version 2>/dev/null && echo "$(GREEN)✅$(NC)" || echo "$(RED)❌$(NC)"
	@printf "  npm: "
	@npm --version 2>/dev/null && echo "$(GREEN)✅$(NC)" || echo "$(RED)❌$(NC)"
	@printf "  Gemini CLI: "
	@gemini --version 2>/dev/null && echo "$(GREEN)✅$(NC)" || echo "$(RED)❌$(NC)"
	@echo ""
	@echo "$(BLUE)🔑 Configuração:$(NC)"
	@printf "  Autenticação OAuth: "
	@echo "$(GREEN)✅ Configurada (sem necessidade de API Key)$(NC)"
	@echo ""
	@echo "$(BLUE)📁 Estrutura do Projeto:$(NC)"
	@printf "  core-config.yml: "
	@if [ -f "core-config.yml" ]; then echo "$(GREEN)✅ Existe$(NC)"; else echo "$(YELLOW)⚠️  Não encontrado$(NC)"; fi
	@printf "  docs/: "
	@if [ -d "docs" ]; then echo "$(GREEN)✅ Existe$(NC)"; else echo "$(YELLOW)⚠️  Não encontrado$(NC)"; fi
	@printf "  .gemini/: "
	@if [ -d ".gemini" ]; then echo "$(GREEN)✅ Existe$(NC)"; else echo "$(YELLOW)⚠️  Não encontrado$(NC)"; fi
	@echo ""
	@echo "$(BLUE)📊 Status BMAD-Method:$(NC)"
	@npx bmad-method status 2>/dev/null || echo "$(YELLOW)⚠️  Execute 'make setup-bmad' para configurar$(NC)"

clean-docs: ## 🧹 Limpar documentação gerada
	@echo "$(YELLOW)🧹 Limpando documentação gerada...$(NC)"
	@if [ -d "docs" ]; then \
		echo "$(BLUE)📁 Removendo docs/...$(NC)"; \
		rm -rf docs/; \
	fi
	@if [ -d ".ai" ]; then \
		echo "$(BLUE)📁 Removendo .ai/...$(NC)"; \
		rm -rf .ai/; \
	fi
	@if [ -f "core-config.yml" ]; then \
		echo "$(BLUE)📄 Removendo core-config.yml...$(NC)"; \
		rm -f core-config.yml; \
	fi
	@echo "$(GREEN)✅ Documentação limpa!$(NC)"
	@echo "$(YELLOW)💡 Execute 'make setup-bmad' para reconfigurar$(NC)"

##@ Comandos de Desenvolvimento

configure-language: ## 🌐 Configurar idioma português brasileiro para todos os agentes
	@echo "$(CYAN)🌐 Configurando idioma português brasileiro...$(NC)"
	@echo "$(BLUE)📝 Instrução de idioma configurada:$(NC)"
	@echo "$(YELLOW)$(LANG_INSTRUCTION)$(NC)"
	@echo ""
	@echo "$(GREEN)✅ Todos os comandos do Makefile usarão português brasileiro!$(NC)"
	@echo "$(BLUE)💡 Para comandos manuais, use sempre o prefixo:$(NC)"
	@echo "$(CYAN)gemini -p '$(LANG_INSTRUCTION) @agente comando'$(NC)"

dev-help: ## 🛠️ Comandos úteis para desenvolvimento
	@echo "$(CYAN)🛠️  Comandos úteis do Gemini CLI (em português):$(NC)"
	@echo ""
	@echo "$(YELLOW)📊 Sistema:$(NC)"
	@echo "  $(GREEN)gemini -p '/help'$(NC)          - Ajuda do Gemini CLI"
	@echo "  $(GREEN)gemini -p '/stats'$(NC)         - Estatísticas de uso"
	@echo "  $(GREEN)gemini -p '/about'$(NC)         - Informações da versão"
	@echo ""
	@echo "$(YELLOW)📁 Arquivos (modo interativo):$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @arquivo.txt Analise este arquivo' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @src/ Revise este código' | gemini$(NC)"
	@echo ""
	@echo "$(YELLOW)🔧 Shell (dentro do Gemini CLI interativo):$(NC)"
	@echo "  $(GREEN)!ls -la$(NC)        - Executar comando shell"
	@echo "  $(GREEN)!git status$(NC)    - Status do git"
	@echo ""
	@echo "$(YELLOW)🎨 Configuração (dentro do Gemini CLI interativo):$(NC)"
	@echo "  $(GREEN)/theme$(NC)         - Alterar tema"
	@echo "  $(GREEN)/memory show$(NC)   - Mostrar contexto"
	@echo "  $(GREEN)/help$(NC)          - Ajuda completa"
	@echo "  $(GREEN)/exit$(NC)          - Sair do modo interativo"
	@echo ""
	@echo "$(YELLOW)🤖 Agentes BMAD (modo interativo):$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @analyst [comando]' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @pm [comando]' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @architect [comando]' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @dev [comando]' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @sm [comando]' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @po [comando]' | gemini$(NC)"
	@echo "  $(GREEN)echo '$(LANG_INSTRUCTION) @qa [comando]' | gemini$(NC)"
	@echo ""
	@echo "$(YELLOW)💡 Modo Totalmente Interativo:$(NC)"
	@echo "  $(GREEN)gemini$(NC)                    - Abrir CLI interativo"
	@echo "  $(GREEN)gemini $(MODEL_FLAG)$(NC)      - Abrir com modelo específico"

interactive: ## 🎯 Abrir Gemini CLI em modo totalmente interativo
	@echo "$(CYAN)🤖 Abrindo Gemini CLI em modo totalmente interativo...$(NC)"
	@echo "$(BLUE)Modelo: $(GEMINI_MODEL)$(NC)"
	@echo "$(YELLOW)💡 Comandos úteis dentro do CLI:$(NC)"
	@echo "  $(GREEN)/help$(NC)          - Ajuda completa"
	@echo "  $(GREEN)/tools$(NC)         - Ver ferramentas disponíveis"
	@echo "  $(GREEN)/mcp$(NC)           - Ver servidores MCP"
	@echo "  $(GREEN)/stats$(NC)         - Estatísticas de uso"
	@echo "  $(GREEN)/exit$(NC)          - Sair"
	@echo ""
	@echo "$(YELLOW)💡 Agentes BMAD disponíveis:$(NC)"
	@echo "  $(GREEN)@analyst$(NC)       - Análise de projetos"
	@echo "  $(GREEN)@pm$(NC)            - Product Manager"
	@echo "  $(GREEN)@architect$(NC)     - Arquiteto de software"
	@echo "  $(GREEN)@dev$(NC)           - Desenvolvedor"
	@echo "  $(GREEN)@sm$(NC)            - Scrum Master"
	@echo "  $(GREEN)@po$(NC)            - Product Owner"
	@echo "  $(GREEN)@qa$(NC)            - Quality Assurance"
	@echo ""
	@echo "$(YELLOW)💡 Exemplo de uso:$(NC)"
	@echo "  $(CYAN)$(AGENT_PREFIX) @analyst *document-project$(NC)"
	@echo ""
	@echo "$(GREEN)🚀 Iniciando sessão interativa...$(NC)"
	@gemini $(MODEL_FLAG)

manual-command: ## 🎯 Executar comando manual com agente específico (uso: make manual-command AGENT=analyst COMMAND="*document-project")
	@if [ -z "$(AGENT)" ] || [ -z "$(COMMAND)" ]; then \
		echo "$(RED)❌ Uso: make manual-command AGENT=nome_agente COMMAND=\"comando\"$(NC)"; \
		echo "$(YELLOW)💡 Exemplo: make manual-command AGENT=analyst COMMAND=\"*document-project\"$(NC)"; \
		echo "$(YELLOW)💡 Agentes disponíveis: analyst, pm, architect, dev, sm, po, qa$(NC)"; \
		exit 1; \
	fi
	@echo "$(CYAN)🤖 Comando manual em português (modelo: $(GEMINI_MODEL))...$(NC)"
	@echo "$(BLUE)Agente: @$(AGENT)$(NC)"
	@echo "$(BLUE)Comando: $(COMMAND)$(NC)"
	@echo ""
	@echo "$(CYAN)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    COMANDO PARA EXECUTAR                     ║$(NC)"
	@echo "$(CYAN)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Abra um novo terminal$(NC)"
	@echo "$(YELLOW)2. Execute o comando abaixo:$(NC)"
	@echo ""
	@echo "$(GREEN)gemini $(MODEL_FLAG)$(NC)"
	@echo ""
	@echo "$(YELLOW)3. Dentro do Gemini CLI, digite:$(NC)"
	@echo ""
	@echo "$(CYAN)$(AGENT_PREFIX) @$(AGENT) $(COMMAND)$(NC)"
	@echo ""
	@echo "$(YELLOW)4. Quando terminar, digite '/exit' para sair$(NC)"
	@echo ""
	@printf "$(BLUE)Pressione ENTER quando tiver concluído o comando...$(NC)"
	@read dummy
	@echo "$(GREEN)✅ Comando manual concluído!$(NC)"

# Validações internas
_check_oauth:
	@echo "$(BLUE)🔐 Verificando autenticação OAuth...$(NC)"
	# @gemini -p "test" >/dev/null 2>&1 || \
	#   (echo "$(RED)❌ Problema na autenticação OAuth!$(NC)" && \
	#    echo "$(YELLOW)💡 Execute: make setup-oauth$(NC)" && exit 1)

_check_gemini_cli:
	@if ! command -v gemini >/dev/null 2>&1; then \
		echo "$(RED)❌ Gemini CLI não está instalado!$(NC)"; \
		echo "$(YELLOW)💡 Execute: make setup-gemini$(NC)"; \
		exit 1; \
	fi

# Adicionar validações aos comandos que precisam
analyze plan-prd plan-arch validate create-epic create-stories implement-story: _check_oauth _check_gemini_cli

# Informações do projeto
info:
	@echo "$(CYAN)ℹ️  Informações do Projeto:$(NC)"
	@echo "  Nome: $(PROJECT_NAME)"
	@echo "  Diretório: $(PWD)"
	@echo "  Makefile: $(MAKEFILE_LIST)"