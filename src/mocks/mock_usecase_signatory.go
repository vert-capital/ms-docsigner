// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/signatory (interfaces: IUsecaseSignatory)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseSignatory is a mock of IUsecaseSignatory interface.
type MockIUsecaseSignatory struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseSignatoryMockRecorder
}

// MockIUsecaseSignatoryMockRecorder is the mock recorder for MockIUsecaseSignatory.
type MockIUsecaseSignatoryMockRecorder struct {
	mock *MockIUsecaseSignatory
}

// NewMockIUsecaseSignatory creates a new mock instance.
func NewMockIUsecaseSignatory(ctrl *gomock.Controller) *MockIUsecaseSignatory {
	mock := &MockIUsecaseSignatory{ctrl: ctrl}
	mock.recorder = &MockIUsecaseSignatoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseSignatory) EXPECT() *MockIUsecaseSignatoryMockRecorder {
	return m.recorder
}

// AssociateToEnvelope mocks base method.
func (m *MockIUsecaseSignatory) AssociateToEnvelope(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateToEnvelope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateToEnvelope indicates an expected call of AssociateToEnvelope.
func (mr *MockIUsecaseSignatoryMockRecorder) AssociateToEnvelope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateToEnvelope", reflect.TypeOf((*MockIUsecaseSignatory)(nil).AssociateToEnvelope), arg0, arg1)
}

// CreateSignatory mocks base method.
func (m *MockIUsecaseSignatory) CreateSignatory(arg0 *entity.EntitySignatory) (*entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignatory", arg0)
	ret0, _ := ret[0].(*entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSignatory indicates an expected call of CreateSignatory.
func (mr *MockIUsecaseSignatoryMockRecorder) CreateSignatory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignatory", reflect.TypeOf((*MockIUsecaseSignatory)(nil).CreateSignatory), arg0)
}

// DeleteSignatory mocks base method.
func (m *MockIUsecaseSignatory) DeleteSignatory(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSignatory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSignatory indicates an expected call of DeleteSignatory.
func (mr *MockIUsecaseSignatoryMockRecorder) DeleteSignatory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignatory", reflect.TypeOf((*MockIUsecaseSignatory)(nil).DeleteSignatory), arg0)
}

// GetSignatories mocks base method.
func (m *MockIUsecaseSignatory) GetSignatories(arg0 entity.EntitySignatoryFilters) ([]entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatories", arg0)
	ret0, _ := ret[0].([]entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatories indicates an expected call of GetSignatories.
func (mr *MockIUsecaseSignatoryMockRecorder) GetSignatories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatories", reflect.TypeOf((*MockIUsecaseSignatory)(nil).GetSignatories), arg0)
}

// GetSignatoriesByEnvelope mocks base method.
func (m *MockIUsecaseSignatory) GetSignatoriesByEnvelope(arg0 int) ([]entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatoriesByEnvelope", arg0)
	ret0, _ := ret[0].([]entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatoriesByEnvelope indicates an expected call of GetSignatoriesByEnvelope.
func (mr *MockIUsecaseSignatoryMockRecorder) GetSignatoriesByEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatoriesByEnvelope", reflect.TypeOf((*MockIUsecaseSignatory)(nil).GetSignatoriesByEnvelope), arg0)
}

// GetSignatory mocks base method.
func (m *MockIUsecaseSignatory) GetSignatory(arg0 int) (*entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatory", arg0)
	ret0, _ := ret[0].(*entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatory indicates an expected call of GetSignatory.
func (mr *MockIUsecaseSignatoryMockRecorder) GetSignatory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatory", reflect.TypeOf((*MockIUsecaseSignatory)(nil).GetSignatory), arg0)
}

// UpdateSignatory mocks base method.
func (m *MockIUsecaseSignatory) UpdateSignatory(arg0 *entity.EntitySignatory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignatory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignatory indicates an expected call of UpdateSignatory.
func (mr *MockIUsecaseSignatoryMockRecorder) UpdateSignatory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignatory", reflect.TypeOf((*MockIUsecaseSignatory)(nil).UpdateSignatory), arg0)
}
