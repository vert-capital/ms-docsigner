// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/auto_signature_term (interfaces: IUsecaseAutoSignatureTerm)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseAutoSignatureTerm is a mock of IUsecaseAutoSignatureTerm interface.
type MockIUsecaseAutoSignatureTerm struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseAutoSignatureTermMockRecorder
}

// MockIUsecaseAutoSignatureTermMockRecorder is the mock recorder for MockIUsecaseAutoSignatureTerm.
type MockIUsecaseAutoSignatureTermMockRecorder struct {
	mock *MockIUsecaseAutoSignatureTerm
}

// NewMockIUsecaseAutoSignatureTerm creates a new mock instance.
func NewMockIUsecaseAutoSignatureTerm(ctrl *gomock.Controller) *MockIUsecaseAutoSignatureTerm {
	mock := &MockIUsecaseAutoSignatureTerm{ctrl: ctrl}
	mock.recorder = &MockIUsecaseAutoSignatureTermMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseAutoSignatureTerm) EXPECT() *MockIUsecaseAutoSignatureTermMockRecorder {
	return m.recorder
}

// CreateAutoSignatureTerm mocks base method.
func (m *MockIUsecaseAutoSignatureTerm) CreateAutoSignatureTerm(arg0 context.Context, arg1 *entity.EntityAutoSignatureTerm) (*entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutoSignatureTerm", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutoSignatureTerm indicates an expected call of CreateAutoSignatureTerm.
func (mr *MockIUsecaseAutoSignatureTermMockRecorder) CreateAutoSignatureTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoSignatureTerm", reflect.TypeOf((*MockIUsecaseAutoSignatureTerm)(nil).CreateAutoSignatureTerm), arg0, arg1)
}

// DeleteAutoSignatureTerm mocks base method.
func (m *MockIUsecaseAutoSignatureTerm) DeleteAutoSignatureTerm(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutoSignatureTerm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAutoSignatureTerm indicates an expected call of DeleteAutoSignatureTerm.
func (mr *MockIUsecaseAutoSignatureTermMockRecorder) DeleteAutoSignatureTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoSignatureTerm", reflect.TypeOf((*MockIUsecaseAutoSignatureTerm)(nil).DeleteAutoSignatureTerm), arg0)
}

// GetAllAutoSignatureTerms mocks base method.
func (m *MockIUsecaseAutoSignatureTerm) GetAllAutoSignatureTerms() ([]entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAutoSignatureTerms")
	ret0, _ := ret[0].([]entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAutoSignatureTerms indicates an expected call of GetAllAutoSignatureTerms.
func (mr *MockIUsecaseAutoSignatureTermMockRecorder) GetAllAutoSignatureTerms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAutoSignatureTerms", reflect.TypeOf((*MockIUsecaseAutoSignatureTerm)(nil).GetAllAutoSignatureTerms))
}

// GetAutoSignatureTerm mocks base method.
func (m *MockIUsecaseAutoSignatureTerm) GetAutoSignatureTerm(arg0 int) (*entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoSignatureTerm", arg0)
	ret0, _ := ret[0].(*entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoSignatureTerm indicates an expected call of GetAutoSignatureTerm.
func (mr *MockIUsecaseAutoSignatureTermMockRecorder) GetAutoSignatureTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoSignatureTerm", reflect.TypeOf((*MockIUsecaseAutoSignatureTerm)(nil).GetAutoSignatureTerm), arg0)
}

// GetAutoSignatureTermByClicksignKey mocks base method.
func (m *MockIUsecaseAutoSignatureTerm) GetAutoSignatureTermByClicksignKey(arg0 string) (*entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoSignatureTermByClicksignKey", arg0)
	ret0, _ := ret[0].(*entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoSignatureTermByClicksignKey indicates an expected call of GetAutoSignatureTermByClicksignKey.
func (mr *MockIUsecaseAutoSignatureTermMockRecorder) GetAutoSignatureTermByClicksignKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoSignatureTermByClicksignKey", reflect.TypeOf((*MockIUsecaseAutoSignatureTerm)(nil).GetAutoSignatureTermByClicksignKey), arg0)
}

// UpdateAutoSignatureTerm mocks base method.
func (m *MockIUsecaseAutoSignatureTerm) UpdateAutoSignatureTerm(arg0 *entity.EntityAutoSignatureTerm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutoSignatureTerm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAutoSignatureTerm indicates an expected call of UpdateAutoSignatureTerm.
func (mr *MockIUsecaseAutoSignatureTermMockRecorder) UpdateAutoSignatureTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutoSignatureTerm", reflect.TypeOf((*MockIUsecaseAutoSignatureTerm)(nil).UpdateAutoSignatureTerm), arg0)
}
