// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/signatory (interfaces: IRepositorySignatory)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositorySignatory is a mock of IRepositorySignatory interface.
type MockIRepositorySignatory struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositorySignatoryMockRecorder
}

// MockIRepositorySignatoryMockRecorder is the mock recorder for MockIRepositorySignatory.
type MockIRepositorySignatoryMockRecorder struct {
	mock *MockIRepositorySignatory
}

// NewMockIRepositorySignatory creates a new mock instance.
func NewMockIRepositorySignatory(ctrl *gomock.Controller) *MockIRepositorySignatory {
	mock := &MockIRepositorySignatory{ctrl: ctrl}
	mock.recorder = &MockIRepositorySignatoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositorySignatory) EXPECT() *MockIRepositorySignatoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepositorySignatory) Create(arg0 *entity.EntitySignatory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositorySignatoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositorySignatory)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIRepositorySignatory) Delete(arg0 *entity.EntitySignatory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositorySignatoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositorySignatory)(nil).Delete), arg0)
}

// GetByEmail mocks base method.
func (m *MockIRepositorySignatory) GetByEmail(arg0 string) (*entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIRepositorySignatoryMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIRepositorySignatory)(nil).GetByEmail), arg0)
}

// GetByEmailAndEnvelopeID mocks base method.
func (m *MockIRepositorySignatory) GetByEmailAndEnvelopeID(arg0 string, arg1 int) (*entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmailAndEnvelopeID", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmailAndEnvelopeID indicates an expected call of GetByEmailAndEnvelopeID.
func (mr *MockIRepositorySignatoryMockRecorder) GetByEmailAndEnvelopeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailAndEnvelopeID", reflect.TypeOf((*MockIRepositorySignatory)(nil).GetByEmailAndEnvelopeID), arg0, arg1)
}

// GetByEnvelopeID mocks base method.
func (m *MockIRepositorySignatory) GetByEnvelopeID(arg0 int) ([]entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnvelopeID", arg0)
	ret0, _ := ret[0].([]entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnvelopeID indicates an expected call of GetByEnvelopeID.
func (mr *MockIRepositorySignatoryMockRecorder) GetByEnvelopeID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnvelopeID", reflect.TypeOf((*MockIRepositorySignatory)(nil).GetByEnvelopeID), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositorySignatory) GetByID(arg0 int) (*entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositorySignatoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositorySignatory)(nil).GetByID), arg0)
}

// GetSignatories mocks base method.
func (m *MockIRepositorySignatory) GetSignatories(arg0 entity.EntitySignatoryFilters) ([]entity.EntitySignatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatories", arg0)
	ret0, _ := ret[0].([]entity.EntitySignatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatories indicates an expected call of GetSignatories.
func (mr *MockIRepositorySignatoryMockRecorder) GetSignatories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatories", reflect.TypeOf((*MockIRepositorySignatory)(nil).GetSignatories), arg0)
}

// Update mocks base method.
func (m *MockIRepositorySignatory) Update(arg0 *entity.EntitySignatory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositorySignatoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepositorySignatory)(nil).Update), arg0)
}
