// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/requirement (interfaces: IRepositoryRequirement)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryRequirement is a mock of IRepositoryRequirement interface.
type MockIRepositoryRequirement struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryRequirementMockRecorder
}

// MockIRepositoryRequirementMockRecorder is the mock recorder for MockIRepositoryRequirement.
type MockIRepositoryRequirementMockRecorder struct {
	mock *MockIRepositoryRequirement
}

// NewMockIRepositoryRequirement creates a new mock instance.
func NewMockIRepositoryRequirement(ctrl *gomock.Controller) *MockIRepositoryRequirement {
	mock := &MockIRepositoryRequirement{ctrl: ctrl}
	mock.recorder = &MockIRepositoryRequirementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryRequirement) EXPECT() *MockIRepositoryRequirementMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepositoryRequirement) Create(arg0 context.Context, arg1 *entity.EntityRequirement) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryRequirementMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositoryRequirement)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIRepositoryRequirement) Delete(arg0 context.Context, arg1 *entity.EntityRequirement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryRequirementMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositoryRequirement)(nil).Delete), arg0, arg1)
}

// GetByClicksignKey mocks base method.
func (m *MockIRepositoryRequirement) GetByClicksignKey(arg0 context.Context, arg1 string) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClicksignKey", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClicksignKey indicates an expected call of GetByClicksignKey.
func (mr *MockIRepositoryRequirementMockRecorder) GetByClicksignKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClicksignKey", reflect.TypeOf((*MockIRepositoryRequirement)(nil).GetByClicksignKey), arg0, arg1)
}

// GetByEnvelopeID mocks base method.
func (m *MockIRepositoryRequirement) GetByEnvelopeID(arg0 context.Context, arg1 int) ([]entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnvelopeID", arg0, arg1)
	ret0, _ := ret[0].([]entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnvelopeID indicates an expected call of GetByEnvelopeID.
func (mr *MockIRepositoryRequirementMockRecorder) GetByEnvelopeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnvelopeID", reflect.TypeOf((*MockIRepositoryRequirement)(nil).GetByEnvelopeID), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockIRepositoryRequirement) GetByID(arg0 context.Context, arg1 int) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryRequirementMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryRequirement)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockIRepositoryRequirement) Update(arg0 context.Context, arg1 *entity.EntityRequirement) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryRequirementMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepositoryRequirement)(nil).Update), arg0, arg1)
}
