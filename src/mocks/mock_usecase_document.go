// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/document (interfaces: IUsecaseDocument)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseDocument is a mock of IUsecaseDocument interface.
type MockIUsecaseDocument struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseDocumentMockRecorder
}

// MockIUsecaseDocumentMockRecorder is the mock recorder for MockIUsecaseDocument.
type MockIUsecaseDocumentMockRecorder struct {
	mock *MockIUsecaseDocument
}

// NewMockIUsecaseDocument creates a new mock instance.
func NewMockIUsecaseDocument(ctrl *gomock.Controller) *MockIUsecaseDocument {
	mock := &MockIUsecaseDocument{ctrl: ctrl}
	mock.recorder = &MockIUsecaseDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseDocument) EXPECT() *MockIUsecaseDocumentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsecaseDocument) Create(arg0 *entity.EntityDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUsecaseDocumentMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsecaseDocument)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIUsecaseDocument) Delete(arg0 *entity.EntityDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUsecaseDocumentMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUsecaseDocument)(nil).Delete), arg0)
}

// GetDocument mocks base method.
func (m *MockIUsecaseDocument) GetDocument(arg0 int) (*entity.EntityDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", arg0)
	ret0, _ := ret[0].(*entity.EntityDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockIUsecaseDocumentMockRecorder) GetDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockIUsecaseDocument)(nil).GetDocument), arg0)
}

// GetDocuments mocks base method.
func (m *MockIUsecaseDocument) GetDocuments(arg0 entity.EntityDocumentFilters) ([]entity.EntityDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocuments", arg0)
	ret0, _ := ret[0].([]entity.EntityDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocuments indicates an expected call of GetDocuments.
func (mr *MockIUsecaseDocumentMockRecorder) GetDocuments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocuments", reflect.TypeOf((*MockIUsecaseDocument)(nil).GetDocuments), arg0)
}

// PrepareForSigning mocks base method.
func (m *MockIUsecaseDocument) PrepareForSigning(arg0 int) (*entity.EntityDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForSigning", arg0)
	ret0, _ := ret[0].(*entity.EntityDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareForSigning indicates an expected call of PrepareForSigning.
func (mr *MockIUsecaseDocumentMockRecorder) PrepareForSigning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForSigning", reflect.TypeOf((*MockIUsecaseDocument)(nil).PrepareForSigning), arg0)
}

// Update mocks base method.
func (m *MockIUsecaseDocument) Update(arg0 *entity.EntityDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsecaseDocumentMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsecaseDocument)(nil).Update), arg0)
}

// UploadToClicksign mocks base method.
func (m *MockIUsecaseDocument) UploadToClicksign(arg0 *entity.EntityDocument) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToClicksign", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadToClicksign indicates an expected call of UploadToClicksign.
func (mr *MockIUsecaseDocumentMockRecorder) UploadToClicksign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToClicksign", reflect.TypeOf((*MockIUsecaseDocument)(nil).UploadToClicksign), arg0)
}
