// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/envelope (interfaces: IRepositoryEnvelope)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryEnvelope is a mock of IRepositoryEnvelope interface.
type MockIRepositoryEnvelope struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryEnvelopeMockRecorder
}

// MockIRepositoryEnvelopeMockRecorder is the mock recorder for MockIRepositoryEnvelope.
type MockIRepositoryEnvelopeMockRecorder struct {
	mock *MockIRepositoryEnvelope
}

// NewMockIRepositoryEnvelope creates a new mock instance.
func NewMockIRepositoryEnvelope(ctrl *gomock.Controller) *MockIRepositoryEnvelope {
	mock := &MockIRepositoryEnvelope{ctrl: ctrl}
	mock.recorder = &MockIRepositoryEnvelopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryEnvelope) EXPECT() *MockIRepositoryEnvelopeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepositoryEnvelope) Create(arg0 *entity.EntityEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryEnvelopeMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositoryEnvelope)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIRepositoryEnvelope) Delete(arg0 *entity.EntityEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryEnvelopeMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositoryEnvelope)(nil).Delete), arg0)
}

// GetByClicksignKey mocks base method.
func (m *MockIRepositoryEnvelope) GetByClicksignKey(arg0 string) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClicksignKey", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClicksignKey indicates an expected call of GetByClicksignKey.
func (mr *MockIRepositoryEnvelopeMockRecorder) GetByClicksignKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClicksignKey", reflect.TypeOf((*MockIRepositoryEnvelope)(nil).GetByClicksignKey), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryEnvelope) GetByID(arg0 int) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryEnvelopeMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryEnvelope)(nil).GetByID), arg0)
}

// GetEnvelopes mocks base method.
func (m *MockIRepositoryEnvelope) GetEnvelopes(arg0 entity.EntityEnvelopeFilters) ([]entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopes", arg0)
	ret0, _ := ret[0].([]entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopes indicates an expected call of GetEnvelopes.
func (mr *MockIRepositoryEnvelopeMockRecorder) GetEnvelopes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopes", reflect.TypeOf((*MockIRepositoryEnvelope)(nil).GetEnvelopes), arg0)
}

// Update mocks base method.
func (m *MockIRepositoryEnvelope) Update(arg0 *entity.EntityEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryEnvelopeMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepositoryEnvelope)(nil).Update), arg0)
}
