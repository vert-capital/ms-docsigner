// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/requirement (interfaces: IUsecaseRequirement)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseRequirement is a mock of IUsecaseRequirement interface.
type MockIUsecaseRequirement struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseRequirementMockRecorder
}

// MockIUsecaseRequirementMockRecorder is the mock recorder for MockIUsecaseRequirement.
type MockIUsecaseRequirementMockRecorder struct {
	mock *MockIUsecaseRequirement
}

// NewMockIUsecaseRequirement creates a new mock instance.
func NewMockIUsecaseRequirement(ctrl *gomock.Controller) *MockIUsecaseRequirement {
	mock := &MockIUsecaseRequirement{ctrl: ctrl}
	mock.recorder = &MockIUsecaseRequirementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseRequirement) EXPECT() *MockIUsecaseRequirementMockRecorder {
	return m.recorder
}

// CreateRequirement mocks base method.
func (m *MockIUsecaseRequirement) CreateRequirement(arg0 context.Context, arg1 *entity.EntityRequirement) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequirement", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequirement indicates an expected call of CreateRequirement.
func (mr *MockIUsecaseRequirementMockRecorder) CreateRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequirement", reflect.TypeOf((*MockIUsecaseRequirement)(nil).CreateRequirement), arg0, arg1)
}

// DeleteRequirement mocks base method.
func (m *MockIUsecaseRequirement) DeleteRequirement(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequirement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequirement indicates an expected call of DeleteRequirement.
func (mr *MockIUsecaseRequirementMockRecorder) DeleteRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequirement", reflect.TypeOf((*MockIUsecaseRequirement)(nil).DeleteRequirement), arg0, arg1)
}

// GetRequirement mocks base method.
func (m *MockIUsecaseRequirement) GetRequirement(arg0 context.Context, arg1 int) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequirement", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequirement indicates an expected call of GetRequirement.
func (mr *MockIUsecaseRequirementMockRecorder) GetRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequirement", reflect.TypeOf((*MockIUsecaseRequirement)(nil).GetRequirement), arg0, arg1)
}

// GetRequirementsByEnvelopeID mocks base method.
func (m *MockIUsecaseRequirement) GetRequirementsByEnvelopeID(arg0 context.Context, arg1 int) ([]entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequirementsByEnvelopeID", arg0, arg1)
	ret0, _ := ret[0].([]entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequirementsByEnvelopeID indicates an expected call of GetRequirementsByEnvelopeID.
func (mr *MockIUsecaseRequirementMockRecorder) GetRequirementsByEnvelopeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequirementsByEnvelopeID", reflect.TypeOf((*MockIUsecaseRequirement)(nil).GetRequirementsByEnvelopeID), arg0, arg1)
}

// UpdateRequirement mocks base method.
func (m *MockIUsecaseRequirement) UpdateRequirement(arg0 context.Context, arg1 *entity.EntityRequirement) (*entity.EntityRequirement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequirement", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityRequirement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequirement indicates an expected call of UpdateRequirement.
func (mr *MockIUsecaseRequirementMockRecorder) UpdateRequirement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequirement", reflect.TypeOf((*MockIUsecaseRequirement)(nil).UpdateRequirement), arg0, arg1)
}
