// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/auto_signature_term (interfaces: IRepositoryAutoSignatureTerm)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryAutoSignatureTerm is a mock of IRepositoryAutoSignatureTerm interface.
type MockIRepositoryAutoSignatureTerm struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryAutoSignatureTermMockRecorder
}

// MockIRepositoryAutoSignatureTermMockRecorder is the mock recorder for MockIRepositoryAutoSignatureTerm.
type MockIRepositoryAutoSignatureTermMockRecorder struct {
	mock *MockIRepositoryAutoSignatureTerm
}

// NewMockIRepositoryAutoSignatureTerm creates a new mock instance.
func NewMockIRepositoryAutoSignatureTerm(ctrl *gomock.Controller) *MockIRepositoryAutoSignatureTerm {
	mock := &MockIRepositoryAutoSignatureTerm{ctrl: ctrl}
	mock.recorder = &MockIRepositoryAutoSignatureTermMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryAutoSignatureTerm) EXPECT() *MockIRepositoryAutoSignatureTermMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepositoryAutoSignatureTerm) Create(arg0 *entity.EntityAutoSignatureTerm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryAutoSignatureTermMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositoryAutoSignatureTerm)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIRepositoryAutoSignatureTerm) Delete(arg0 *entity.EntityAutoSignatureTerm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryAutoSignatureTermMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositoryAutoSignatureTerm)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockIRepositoryAutoSignatureTerm) GetAll() ([]entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryAutoSignatureTermMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepositoryAutoSignatureTerm)(nil).GetAll))
}

// GetByClicksignKey mocks base method.
func (m *MockIRepositoryAutoSignatureTerm) GetByClicksignKey(arg0 string) (*entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClicksignKey", arg0)
	ret0, _ := ret[0].(*entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClicksignKey indicates an expected call of GetByClicksignKey.
func (mr *MockIRepositoryAutoSignatureTermMockRecorder) GetByClicksignKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClicksignKey", reflect.TypeOf((*MockIRepositoryAutoSignatureTerm)(nil).GetByClicksignKey), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryAutoSignatureTerm) GetByID(arg0 int) (*entity.EntityAutoSignatureTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityAutoSignatureTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryAutoSignatureTermMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryAutoSignatureTerm)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockIRepositoryAutoSignatureTerm) Update(arg0 *entity.EntityAutoSignatureTerm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryAutoSignatureTermMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepositoryAutoSignatureTerm)(nil).Update), arg0)
}
