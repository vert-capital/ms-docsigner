// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/envelope (interfaces: IUsecaseEnvelope)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseEnvelope is a mock of IUsecaseEnvelope interface.
type MockIUsecaseEnvelope struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseEnvelopeMockRecorder
}

// MockIUsecaseEnvelopeMockRecorder is the mock recorder for MockIUsecaseEnvelope.
type MockIUsecaseEnvelopeMockRecorder struct {
	mock *MockIUsecaseEnvelope
}

// NewMockIUsecaseEnvelope creates a new mock instance.
func NewMockIUsecaseEnvelope(ctrl *gomock.Controller) *MockIUsecaseEnvelope {
	mock := &MockIUsecaseEnvelope{ctrl: ctrl}
	mock.recorder = &MockIUsecaseEnvelopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseEnvelope) EXPECT() *MockIUsecaseEnvelopeMockRecorder {
	return m.recorder
}

// ActivateEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) ActivateEnvelope(arg0 int) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateEnvelope", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateEnvelope indicates an expected call of ActivateEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) ActivateEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).ActivateEnvelope), arg0)
}

// CreateDocument mocks base method.
func (m *MockIUsecaseEnvelope) CreateDocument(arg0 context.Context, arg1 string, arg2 *entity.EntityDocument) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDocument", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocument indicates an expected call of CreateDocument.
func (mr *MockIUsecaseEnvelopeMockRecorder) CreateDocument(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocument", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).CreateDocument), arg0, arg1, arg2)
}

// CreateEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) CreateEnvelope(arg0 *entity.EntityEnvelope) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelope", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelope indicates an expected call of CreateEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) CreateEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).CreateEnvelope), arg0)
}

// CreateEnvelopeWithDocuments mocks base method.
func (m *MockIUsecaseEnvelope) CreateEnvelopeWithDocuments(arg0 *entity.EntityEnvelope, arg1 []*entity.EntityDocument) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelopeWithDocuments", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelopeWithDocuments indicates an expected call of CreateEnvelopeWithDocuments.
func (mr *MockIUsecaseEnvelopeMockRecorder) CreateEnvelopeWithDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelopeWithDocuments", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).CreateEnvelopeWithDocuments), arg0, arg1)
}

// CreateEnvelopeWithRequirements mocks base method.
func (m *MockIUsecaseEnvelope) CreateEnvelopeWithRequirements(arg0 context.Context, arg1 *entity.EntityEnvelope, arg2 []*entity.EntityRequirement) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelopeWithRequirements", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelopeWithRequirements indicates an expected call of CreateEnvelopeWithRequirements.
func (mr *MockIUsecaseEnvelopeMockRecorder) CreateEnvelopeWithRequirements(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelopeWithRequirements", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).CreateEnvelopeWithRequirements), arg0, arg1, arg2)
}

// DeleteEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) DeleteEnvelope(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvelope", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvelope indicates an expected call of DeleteEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) DeleteEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).DeleteEnvelope), arg0)
}

// GetEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) GetEnvelope(arg0 int) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelope", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelope indicates an expected call of GetEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) GetEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).GetEnvelope), arg0)
}

// GetEnvelopeByClicksignKey mocks base method.
func (m *MockIUsecaseEnvelope) GetEnvelopeByClicksignKey(arg0 string) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopeByClicksignKey", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopeByClicksignKey indicates an expected call of GetEnvelopeByClicksignKey.
func (mr *MockIUsecaseEnvelopeMockRecorder) GetEnvelopeByClicksignKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopeByClicksignKey", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).GetEnvelopeByClicksignKey), arg0)
}

// GetEnvelopeByDocumentKey mocks base method.
func (m *MockIUsecaseEnvelope) GetEnvelopeByDocumentKey(arg0 string) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopeByDocumentKey", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopeByDocumentKey indicates an expected call of GetEnvelopeByDocumentKey.
func (mr *MockIUsecaseEnvelopeMockRecorder) GetEnvelopeByDocumentKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopeByDocumentKey", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).GetEnvelopeByDocumentKey), arg0)
}

// GetEnvelopes mocks base method.
func (m *MockIUsecaseEnvelope) GetEnvelopes(arg0 entity.EntityEnvelopeFilters) ([]entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopes", arg0)
	ret0, _ := ret[0].([]entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopes indicates an expected call of GetEnvelopes.
func (mr *MockIUsecaseEnvelopeMockRecorder) GetEnvelopes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopes", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).GetEnvelopes), arg0)
}

// NotifyEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) NotifyEnvelope(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyEnvelope", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyEnvelope indicates an expected call of NotifyEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) NotifyEnvelope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).NotifyEnvelope), arg0, arg1, arg2)
}

// UpdateEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) UpdateEnvelope(arg0 *entity.EntityEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelope", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvelope indicates an expected call of UpdateEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) UpdateEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).UpdateEnvelope), arg0)
}

// UpdateEnvelopeForWebhook mocks base method.
func (m *MockIUsecaseEnvelope) UpdateEnvelopeForWebhook(arg0 *entity.EntityEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelopeForWebhook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvelopeForWebhook indicates an expected call of UpdateEnvelopeForWebhook.
func (mr *MockIUsecaseEnvelopeMockRecorder) UpdateEnvelopeForWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelopeForWebhook", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).UpdateEnvelopeForWebhook), arg0)
}
