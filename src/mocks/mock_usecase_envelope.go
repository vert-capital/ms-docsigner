// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/envelope (interfaces: IUsecaseEnvelope)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseEnvelope is a mock of IUsecaseEnvelope interface.
type MockIUsecaseEnvelope struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseEnvelopeMockRecorder
}

// MockIUsecaseEnvelopeMockRecorder is the mock recorder for MockIUsecaseEnvelope.
type MockIUsecaseEnvelopeMockRecorder struct {
	mock *MockIUsecaseEnvelope
}

// NewMockIUsecaseEnvelope creates a new mock instance.
func NewMockIUsecaseEnvelope(ctrl *gomock.Controller) *MockIUsecaseEnvelope {
	mock := &MockIUsecaseEnvelope{ctrl: ctrl}
	mock.recorder = &MockIUsecaseEnvelopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseEnvelope) EXPECT() *MockIUsecaseEnvelopeMockRecorder {
	return m.recorder
}

// ActivateEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) ActivateEnvelope(arg0 int) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateEnvelope", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateEnvelope indicates an expected call of ActivateEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) ActivateEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).ActivateEnvelope), arg0)
}

// CreateEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) CreateEnvelope(arg0 *entity.EntityEnvelope) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvelope", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvelope indicates an expected call of CreateEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) CreateEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).CreateEnvelope), arg0)
}

// DeleteEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) DeleteEnvelope(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvelope", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvelope indicates an expected call of DeleteEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) DeleteEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).DeleteEnvelope), arg0)
}

// GetEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) GetEnvelope(arg0 int) (*entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelope", arg0)
	ret0, _ := ret[0].(*entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelope indicates an expected call of GetEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) GetEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).GetEnvelope), arg0)
}

// GetEnvelopes mocks base method.
func (m *MockIUsecaseEnvelope) GetEnvelopes(arg0 entity.EntityEnvelopeFilters) ([]entity.EntityEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvelopes", arg0)
	ret0, _ := ret[0].([]entity.EntityEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvelopes indicates an expected call of GetEnvelopes.
func (mr *MockIUsecaseEnvelopeMockRecorder) GetEnvelopes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvelopes", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).GetEnvelopes), arg0)
}

// UpdateEnvelope mocks base method.
func (m *MockIUsecaseEnvelope) UpdateEnvelope(arg0 *entity.EntityEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelope", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvelope indicates an expected call of UpdateEnvelope.
func (mr *MockIUsecaseEnvelopeMockRecorder) UpdateEnvelope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelope", reflect.TypeOf((*MockIUsecaseEnvelope)(nil).UpdateEnvelope), arg0)
}
