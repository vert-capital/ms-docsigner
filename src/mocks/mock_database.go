// Code generated by MockGen. DO NOT EDIT.
// Source: app/database (interfaces: IDatabase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// ConnectDatabase mocks base method.
func (m *MockIDatabase) ConnectDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectDatabase indicates an expected call of ConnectDatabase.
func (mr *MockIDatabaseMockRecorder) ConnectDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDatabase", reflect.TypeOf((*MockIDatabase)(nil).ConnectDatabase))
}

// DisconnectDatabase mocks base method.
func (m *MockIDatabase) DisconnectDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectDatabase indicates an expected call of DisconnectDatabase.
func (mr *MockIDatabaseMockRecorder) DisconnectDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectDatabase", reflect.TypeOf((*MockIDatabase)(nil).DisconnectDatabase))
}
