// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/document (interfaces: IRepositoryDocument)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryDocument is a mock of IRepositoryDocument interface.
type MockIRepositoryDocument struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryDocumentMockRecorder
}

// MockIRepositoryDocumentMockRecorder is the mock recorder for MockIRepositoryDocument.
type MockIRepositoryDocumentMockRecorder struct {
	mock *MockIRepositoryDocument
}

// NewMockIRepositoryDocument creates a new mock instance.
func NewMockIRepositoryDocument(ctrl *gomock.Controller) *MockIRepositoryDocument {
	mock := &MockIRepositoryDocument{ctrl: ctrl}
	mock.recorder = &MockIRepositoryDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryDocument) EXPECT() *MockIRepositoryDocumentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepositoryDocument) Create(arg0 *entity.EntityDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryDocumentMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositoryDocument)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIRepositoryDocument) Delete(arg0 *entity.EntityDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryDocumentMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositoryDocument)(nil).Delete), arg0)
}

// GetByClicksignKey mocks base method.
func (m *MockIRepositoryDocument) GetByClicksignKey(arg0 string) (*entity.EntityDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClicksignKey", arg0)
	ret0, _ := ret[0].(*entity.EntityDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClicksignKey indicates an expected call of GetByClicksignKey.
func (mr *MockIRepositoryDocumentMockRecorder) GetByClicksignKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClicksignKey", reflect.TypeOf((*MockIRepositoryDocument)(nil).GetByClicksignKey), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryDocument) GetByID(arg0 int) (*entity.EntityDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryDocumentMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryDocument)(nil).GetByID), arg0)
}

// GetDocuments mocks base method.
func (m *MockIRepositoryDocument) GetDocuments(arg0 entity.EntityDocumentFilters) ([]entity.EntityDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocuments", arg0)
	ret0, _ := ret[0].([]entity.EntityDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocuments indicates an expected call of GetDocuments.
func (mr *MockIRepositoryDocumentMockRecorder) GetDocuments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocuments", reflect.TypeOf((*MockIRepositoryDocument)(nil).GetDocuments), arg0)
}

// Update mocks base method.
func (m *MockIRepositoryDocument) Update(arg0 *entity.EntityDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryDocumentMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepositoryDocument)(nil).Update), arg0)
}
