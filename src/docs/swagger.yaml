definitions:
  dtos.DocumentCreateRequestDTO:
    properties:
      description:
        example: Documento para assinatura digital
        maxLength: 1000
        type: string
      file_content_base64:
        example: JVBERi0xLjQKM...
        type: string
      file_path:
        example: /path/to/document.pdf
        type: string
      file_size:
        example: 2048576
        type: integer
      mime_type:
        example: application/pdf
        type: string
      name:
        example: Contrato de Prestação de Serviços
        maxLength: 255
        minLength: 3
        type: string
    required:
    - name
    type: object
  dtos.DocumentListResponseDTO:
    properties:
      documents:
        items:
          $ref: '#/definitions/dtos.DocumentResponseDTO'
        type: array
      total:
        type: integer
    type: object
  dtos.DocumentResponseDTO:
    properties:
      clicksign_key:
        type: string
      created_at:
        type: string
      description:
        type: string
      file_path:
        type: string
      file_size:
        type: integer
      id:
        type: integer
      mime_type:
        type: string
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  dtos.DocumentUpdateRequestDTO:
    properties:
      description:
        maxLength: 1000
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      status:
        enum:
        - draft
        - ready
        - processing
        - sent
        type: string
    type: object
  dtos.EnvelopeCreateRequestDTO:
    properties:
      approved:
        description: Indica se o envelope foi aprovado
        type: boolean
      auto_close:
        type: boolean
      deadline_at:
        type: string
      description:
        maxLength: 1000
        type: string
      documents:
        items:
          $ref: '#/definitions/dtos.EnvelopeDocumentRequest'
        type: array
      documents_ids:
        items:
          type: integer
        type: array
      message:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
      qualifiers:
        description: Qualificadores para o envelope, como "sign", "agree", etc.
        items:
          $ref: '#/definitions/dtos.EnvelopeRequirementRequest'
        type: array
      remind_interval:
        maximum: 30
        minimum: 1
        type: integer
      requirements:
        items:
          $ref: '#/definitions/dtos.EnvelopeRequirementRequest'
        type: array
      signatories:
        items:
          $ref: '#/definitions/dtos.EnvelopeSignatoryRequest'
        type: array
      signatory_emails:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  dtos.EnvelopeDocumentRequest:
    properties:
      description:
        type: string
      file_content_base64:
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - file_content_base64
    - name
    type: object
  dtos.EnvelopeListResponseDTO:
    properties:
      envelopes:
        items:
          $ref: '#/definitions/dtos.EnvelopeResponseDTO'
        type: array
      total:
        type: integer
    type: object
  dtos.EnvelopeNotificationRequestDTO:
    properties:
      message:
        maxLength: 500
        type: string
    required:
    - message
    type: object
  dtos.EnvelopeNotificationResponseDTO:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dtos.EnvelopeRequirementRequest:
    properties:
      action:
        enum:
        - agree
        - sign
        - provide_evidence
        type: string
      auth:
        enum:
        - email
        - icp_brasil
        type: string
      document_id:
        type: string
      role:
        enum:
        - sign
        type: string
      signer_id:
        type: string
    required:
    - action
    type: object
  dtos.EnvelopeResponseDTO:
    properties:
      auto_close:
        type: boolean
      clicksign_key:
        type: string
      clicksign_raw_data:
        type: string
      created_at:
        type: string
      deadline_at:
        type: string
      description:
        type: string
      documents_ids:
        items:
          type: integer
        type: array
      id:
        type: integer
      message:
        type: string
      name:
        type: string
      remind_interval:
        type: integer
      signatories:
        items:
          $ref: '#/definitions/dtos.SignatoryResponseDTO'
        type: array
      signatory_emails:
        items:
          type: string
        type: array
      status:
        type: string
      updated_at:
        type: string
    type: object
  dtos.EnvelopeSignatoryRequest:
    properties:
      birthday:
        type: string
      communicate_events:
        $ref: '#/definitions/dtos.SignatoryCommunicateEventsDTO'
      email:
        type: string
      group:
        type: integer
      has_documentation:
        type: boolean
      name:
        maxLength: 255
        minLength: 2
        type: string
      phone_number:
        type: string
      refusable:
        type: boolean
    required:
    - email
    - name
    type: object
  dtos.ErrorResponseDTO:
    properties:
      details:
        additionalProperties: true
        type: object
      error:
        type: string
      message:
        type: string
    type: object
  dtos.RequirementCreateRequestDTO:
    properties:
      action:
        enum:
        - agree
        - sign
        - provide_evidence
        type: string
      auth:
        enum:
        - email
        - icp_brasil
        type: string
      document_id:
        type: string
      role:
        enum:
        - sign
        type: string
      signer_id:
        type: string
    required:
    - action
    type: object
  dtos.RequirementListResponseDTO:
    properties:
      requirements:
        items:
          $ref: '#/definitions/dtos.RequirementResponseDTO'
        type: array
      total:
        type: integer
    type: object
  dtos.RequirementResponseDTO:
    properties:
      action:
        type: string
      auth:
        type: string
      clicksign_key:
        type: string
      created_at:
        type: string
      document_id:
        type: string
      envelope_id:
        type: integer
      id:
        type: integer
      role:
        type: string
      signer_id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  dtos.RequirementUpdateRequestDTO:
    properties:
      status:
        enum:
        - pending
        - completed
        type: string
    type: object
  dtos.SignatoryCommunicateEventsDTO:
    properties:
      document_signed:
        type: string
      signature_reminder:
        type: string
      signature_request:
        type: string
    type: object
  dtos.SignatoryCreateRequestDTO:
    properties:
      birthday:
        type: string
      communicate_events:
        $ref: '#/definitions/dtos.SignatoryCommunicateEventsDTO'
      email:
        type: string
      envelope_id:
        type: integer
      group:
        type: integer
      has_documentation:
        type: boolean
      name:
        maxLength: 255
        minLength: 2
        type: string
      phone_number:
        type: string
      refusable:
        type: boolean
    required:
    - email
    - envelope_id
    - name
    type: object
  dtos.SignatoryListResponseDTO:
    properties:
      signatories:
        items:
          $ref: '#/definitions/dtos.SignatoryResponseDTO'
        type: array
      total:
        type: integer
    type: object
  dtos.SignatoryResponseDTO:
    properties:
      birthday:
        type: string
      communicate_events:
        $ref: '#/definitions/dtos.SignatoryCommunicateEventsDTO'
      created_at:
        type: string
      email:
        type: string
      envelope_id:
        type: integer
      group:
        type: integer
      has_documentation:
        type: boolean
      id:
        type: integer
      name:
        type: string
      phone_number:
        type: string
      refusable:
        type: boolean
      updated_at:
        type: string
    type: object
  dtos.SignatoryUpdateRequestDTO:
    properties:
      birthday:
        type: string
      communicate_events:
        $ref: '#/definitions/dtos.SignatoryCommunicateEventsDTO'
      email:
        type: string
      envelope_id:
        type: integer
      group:
        type: integer
      has_documentation:
        type: boolean
      name:
        maxLength: 255
        minLength: 2
        type: string
      phone_number:
        type: string
      refusable:
        type: boolean
    type: object
  dtos.ValidationErrorDetail:
    properties:
      field:
        type: string
      message:
        type: string
      value:
        type: string
    type: object
  dtos.ValidationErrorResponseDTO:
    properties:
      details:
        items:
          $ref: '#/definitions/dtos.ValidationErrorDetail'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  entity.EntityUser:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      name:
        maxLength: 120
        minLength: 3
        type: string
      password:
        maxLength: 120
        minLength: 4
        type: string
      updated_at:
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      summary: Login
      tags:
      - User
  /api/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: entity.EntityUser
        required: true
        schema:
          $ref: '#/definitions/entity.EntityUser'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - User
  /api/user/create:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User
        in: body
        name: entity.EntityUser
        required: true
        schema:
          $ref: '#/definitions/entity.EntityUser'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - User
  /api/user/list:
    get:
      consumes:
      - application/json
      description: Get users
      parameters:
      - description: Search
        in: query
        name: search
        type: string
      - description: Active
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - User
  /api/user/me:
    get:
      consumes:
      - application/json
      description: Get me
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - User
  /api/user/password/{id}:
    put:
      consumes:
      - application/json
      description: Update password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: entity.EntityUser
        required: true
        schema:
          $ref: '#/definitions/entity.EntityUser'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/entity.EntityUser'
      security:
      - ApiKeyAuth: []
      summary: Update password
      tags:
      - User
  /api/v1/documents:
    get:
      consumes:
      - application/json
      description: Retorna uma lista de documentos com filtros opcionais
      parameters:
      - description: Buscar por nome
        in: query
        name: search
        type: string
      - description: Filtrar por status
        in: query
        name: status
        type: string
      - description: Filtrar por chave Clicksign
        in: query
        name: clicksign_key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lista de documentos
          schema:
            $ref: '#/definitions/dtos.DocumentListResponseDTO'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Erro interno
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Listar documentos
      tags:
      - Documents
    post:
      consumes:
      - application/json
      description: |-
        Cria um novo documento usando file_path ou conteúdo base64
        Aceita documentos através de file_path (caminho absoluto) ou file_content_base64 (conteúdo em base64)
        Para file_path: file_size e mime_type são obrigatórios
        Para file_content_base64: file_size e mime_type são opcionais (detectados automaticamente)
        Tipos suportados: PDF, JPEG, PNG, GIF
        Tamanho máximo: 7.5MB após decodificação
      parameters:
      - description: Dados do documento
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/dtos.DocumentCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Documento criado com sucesso
          schema:
            $ref: '#/definitions/dtos.DocumentResponseDTO'
        "400":
          description: Dados inválidos
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Erro interno
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Criar documento
      tags:
      - Documents
  /api/v1/documents/{id}:
    delete:
      consumes:
      - application/json
      description: Remove um documento do sistema
      parameters:
      - description: ID do documento
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Documento deletado com sucesso
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Documento não encontrado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Erro interno
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Deletar documento
      tags:
      - Documents
    get:
      consumes:
      - application/json
      description: Retorna um documento específico pelo ID
      parameters:
      - description: ID do documento
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Documento encontrado
          schema:
            $ref: '#/definitions/dtos.DocumentResponseDTO'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Documento não encontrado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Erro interno
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Buscar documento por ID
      tags:
      - Documents
    put:
      consumes:
      - application/json
      description: Atualiza um documento existente
      parameters:
      - description: ID do documento
        in: path
        name: id
        required: true
        type: integer
      - description: Dados para atualização
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/dtos.DocumentUpdateRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Documento atualizado
          schema:
            $ref: '#/definitions/dtos.DocumentResponseDTO'
        "400":
          description: Dados inválidos
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Documento não encontrado
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Erro interno
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Atualizar documento
      tags:
      - Documents
  /api/v1/envelopes:
    get:
      consumes:
      - application/json
      description: Get list of envelopes with optional filters
      parameters:
      - description: Search term
        in: query
        name: search
        type: string
      - description: Status filter
        in: query
        name: status
        type: string
      - description: Clicksign key filter
        in: query
        name: clicksign_key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.EnvelopeListResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: List envelopes
      tags:
      - envelopes
    post:
      consumes:
      - application/json
      description: Create a new envelope in Clicksign with optional signatories. When
        signatories are provided in the request, they will be created along with the
        envelope in a single atomic transaction. The process maintains backward compatibility
        - envelopes can still be created without signatories. The response includes
        the complete raw data returned by Clicksign API for debugging and analysis
        purposes.
      parameters:
      - description: Envelope data with optional signatories array. When signatories
          are provided, the response will include the created signatories with their
          IDs.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.EnvelopeCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Envelope created successfully. The response includes clicksign_raw_data
            field with the complete JSON response from Clicksign API (optional field
            for debugging). If signatories were provided in the request, the response
            includes the created signatories with their assigned IDs.
          schema:
            $ref: '#/definitions/dtos.EnvelopeResponseDTO'
        "400":
          description: Validation error - invalid request data, duplicate signatory
            emails, or unsupported document format
          schema:
            $ref: '#/definitions/dtos.ValidationErrorResponseDTO'
        "500":
          description: Internal server error - envelope creation failed or signatory
            creation failed during transaction
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Create envelope
      tags:
      - envelopes
  /api/v1/envelopes/{id}:
    get:
      consumes:
      - application/json
      description: Get envelope by ID. The response includes clicksign_raw_data field
        with the complete JSON response from Clicksign API when available (optional
        field for debugging and analysis).
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Envelope data with optional clicksign_raw_data field containing
            raw Clicksign API response
          schema:
            $ref: '#/definitions/dtos.EnvelopeResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Get envelope
      tags:
      - envelopes
  /api/v1/envelopes/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate envelope to start signing process
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.EnvelopeResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Activate envelope
      tags:
      - envelopes
  /api/v1/envelopes/{id}/notify:
    post:
      consumes:
      - application/json
      description: Send notification to envelope signatories
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      - description: Notification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.EnvelopeNotificationRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.EnvelopeNotificationResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Notify envelope
      tags:
      - envelopes
  /api/v1/envelopes/{id}/requirements:
    get:
      consumes:
      - application/json
      description: Get all requirements for a specific envelope
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Requirements retrieved successfully
          schema:
            $ref: '#/definitions/dtos.RequirementListResponseDTO'
        "404":
          description: Envelope not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Get requirements by envelope
      tags:
      - requirements
    post:
      consumes:
      - application/json
      description: Create a new requirement for an envelope in Clicksign. Requirements
        define actions (agree, sign, provide_evidence) that signers must complete,
        along with authentication methods when needed.
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      - description: Requirement data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.RequirementCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Requirement created successfully
          schema:
            $ref: '#/definitions/dtos.RequirementResponseDTO'
        "400":
          description: Validation error - invalid request data or business rule violation
          schema:
            $ref: '#/definitions/dtos.ValidationErrorResponseDTO'
        "404":
          description: Envelope not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal server error - requirement creation failed
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Create requirement
      tags:
      - requirements
  /api/v1/envelopes/{id}/send:
    post:
      consumes:
      - application/json
      description: Send envelope signatories to Clicksign for processing
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignatoryListResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Send signatories to Clicksign
      tags:
      - signatories
  /api/v1/envelopes/{id}/signatories:
    get:
      consumes:
      - application/json
      description: Get list of signatories for a specific envelope
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignatoryListResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Get signatories by envelope
      tags:
      - signatories
    post:
      consumes:
      - application/json
      description: Create a new signatory for an envelope
      parameters:
      - description: Envelope ID
        in: path
        name: id
        required: true
        type: integer
      - description: Signatory data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.SignatoryCreateRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.SignatoryResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Create signatory
      tags:
      - signatories
  /api/v1/requirements/{requirement_id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific requirement
      parameters:
      - description: Requirement ID
        in: path
        name: requirement_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Requirement deleted successfully
        "404":
          description: Requirement not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Delete requirement
      tags:
      - requirements
    get:
      consumes:
      - application/json
      description: Get a specific requirement by its ID
      parameters:
      - description: Requirement ID
        in: path
        name: requirement_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Requirement retrieved successfully
          schema:
            $ref: '#/definitions/dtos.RequirementResponseDTO'
        "404":
          description: Requirement not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Get requirement by ID
      tags:
      - requirements
    put:
      consumes:
      - application/json
      description: Update a specific requirement (currently only status can be updated)
      parameters:
      - description: Requirement ID
        in: path
        name: requirement_id
        required: true
        type: integer
      - description: Requirement update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.RequirementUpdateRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Requirement updated successfully
          schema:
            $ref: '#/definitions/dtos.RequirementResponseDTO'
        "400":
          description: Validation error - invalid request data
          schema:
            $ref: '#/definitions/dtos.ValidationErrorResponseDTO'
        "404":
          description: Requirement not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Update requirement
      tags:
      - requirements
  /api/v1/signatories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete signatory by ID
      parameters:
      - description: Signatory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Delete signatory
      tags:
      - signatories
    get:
      consumes:
      - application/json
      description: Get signatory by ID
      parameters:
      - description: Signatory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignatoryResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Get signatory
      tags:
      - signatories
    put:
      consumes:
      - application/json
      description: Update signatory information
      parameters:
      - description: Signatory ID
        in: path
        name: id
        required: true
        type: integer
      - description: Signatory update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.SignatoryUpdateRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignatoryResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationErrorResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Update signatory
      tags:
      - signatories
swagger: "2.0"
